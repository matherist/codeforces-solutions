A. Лента TubeTube
ограничение по времени на тест1 секунда
ограничение по памяти на тест256 мегабайт
вводстандартный ввод
выводстандартный вывод
Гриб Филиппов приготовил себе покушать, а за едой решил посмотреть видео на TubeTube. Он может выделить на обед не более t
 секунд, поэтому просит вас помочь с выбором видео.

Лента TubeTube представляет собой список из n
 видео, пронумерованных от 1
 до n
; i
-е видео длится ai
 секунд и имеет интересность bi
. Изначально лента открыта на первом видео, за 1
 секунду Гриб может пропустить видео и перейти к следующему (если следующее существует). Переходить к следующему видео Гриб может любое количество раз (в том числе и ноль).

Помогите Грибу выбрать одно видео, которое он сможет открыть и посмотреть за t
 секунд. Если таких несколько, он хочет выбрать наиболее интересное. Выведите номер подходящего видео, или −1
, если таких нет.

Входные данные
В первой строке входных данных содержится одно целое число q
 (1≤q≤1000
) — количество наборов входных данных в тесте.

Далее следуют описания наборов.

В первой строке набора содержится два числа n
 и t
 (1≤n≤50
, 1≤t≤200
) — количество видео в ленте и секунд на обед, соответственно.

Во второй строке набора содержится n
 чисел a1,a2,a3,…,an
 (1≤ai≤100
) — продолжительности видео.

В третьей строке набора содержится n
 чисел b1,b2,b3,…,bn
 (1≤bi≤100
) — интересности видео.

Выходные данные
Выведите q
 целых чисел, каждое из которых является ответом на соответствующий набор входных данных. В качестве ответа выведите номер самого интересного видео, которое успеет посмотреть Гриб. Если ответов несколько — выведите любой. Выведите −1
, если он не успеет посмотреть ни одно видео до конца обеда.

Пример
входные данныеСкопировать
5
5 9
1 5 7 6 6
3 4 7 1 9
4 4
4 3 3 2
1 2 3 4
5 7
5 5 5 5 5
2 1 3 9 7
4 33
54 71 69 96
42 24 99 1
2 179
55 66
77 88
выходные данныеСкопировать
3
2
3
-1
2

#include <bit/stdc++.h>
using namespace std;
int main(){
    int q;
    cin >> q;
    while(q--){
        int n, t;
        cin >> n >> t;
        vector <int> dur;
        vector <int> ent;
        for(int i=0; i < n; i++){
            int temp;
            cin >> temp;
            dur.push_back(temp);
        }
        for(int i=0; i < n; i++){
            int temp;
            cin >> temp;
            ent.push_back(temp);
        }
        int maxent = INT_MIN;
        int ind = -2;
        for(int i=0; i < n; i++){
            if(dur[i] <= t-i){
                if(ent[i] > maxent){
                    maxent = ent[i];
                    ind = i;
                }
            }
        }
        cout << ind + 1 << endl;
        
    }
    return 0;
}
